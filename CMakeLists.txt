cmake_minimum_required(VERSION 3.17)
project(luadll C)

set(CMAKE_C_STANDARD 99)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
include_directories(src)
set(tobelib src/lapi.c src/lcode.c src/lctype.c src/ldebug.c src/ldo.c src/ldump.c src/lfunc.c src/lgc.c src/llex.c src/lmem.c src/lobject.c src/lopcodes.c src/lparser.c src/lstate.c src/lstring.c src/ltable.c src/ltm.c src/lundump.c src/lvm.c src/lzio.c src/lauxlib.c src/lbaselib.c src/lcorolib.c src/ldblib.c src/liolib.c src/lmathlib.c src/loslib.c src/lstrlib.c src/ltablib.c src/loadlib.c src/linit.c src/lutf8lib.c)
#if(WIN32  AND NOT CYGWIN)
#    add_definitions("-DLUA_BUILD_AS_DLL") # 不加这个不能动态库
#    option ( LUA_WIN "Windows specific build." ON )
#    option ( LUA_BUILD_WLUA "Build wLua interpretter without console output." ON )
#    option ( LUA_BUILD_AS_DLL "Build Lua library as Dll." ON)
#    #    add_definitions( -D_CRT_SECURE_NO_WARNINGS )
#    option ( LUA_USE_WINDOWS "Windows specific build." ON )
##    option ( LUA_DL_DLL "Fix: dynamic libraries not enabled; check your Lua installation." ON )
#else( )
#    # Posix systems (incl. Cygwin)
#    option ( LUA_USE_POSIX "Use POSIX functionality." ON )
#    option ( LUA_USE_DLOPEN "Use dynamic linker to load modules." ON )
#    option ( LUA_USE_MKSTEMP "Use mkstep." ON )
#    option ( LUA_USE_ISATTY "Use tty." ON )
#    option ( LUA_USE_POPEN "Use popen." ON )
#    option ( LUA_USE_ULONGJMP "Use ulongjmp" ON )
#endif( )
add_library(lua54 SHARED ${tobelib})
add_library (lualib STATIC ${tobelib})
set_target_properties(lualib PROPERTIES OUTPUT_NAME "lua54") # rename the library output name


add_executable(lua src/lua.c)
target_link_libraries(lua lua54)
if(UNIX)
    target_link_libraries(lua m)
endif()

# 3. lua编译器 动态
add_executable(luac src/luac.c)
target_link_libraries (luac lua54)
if(UNIX)
    target_link_libraries(luac m)
endif()
